#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2017 Google
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file at
#     https://www.github.com/GoogleCloudPlatform/magic-modules
#
# ----------------------------------------------------------------------------

from __future__ import absolute_import, division, print_function
__metaclass__ = type

################################################################################
# Documentation
################################################################################

ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ["preview"],
                    'supported_by': 'community'}

DOCUMENTATION = '''
---
module: gcp_iam_service_account_key
description:
    - A service account in the Identity and Access Management API.
short_description: Creates a GCP ServiceAccountKey
version_added: 2.6
author: Jordan Guedj (@jordanguedj) <guedj.jordan@gmail.com>
requirements:
    - python >= 2.6
    - requests >= 2.18.4
    - google-auth >= 1.3.0
options:
    state:
        description:
            - Whether the given object should exist in GCP
        choices: ['present', 'absent']
        default: 'present'
    private_key_type:
        description:
            - Output format for the service account key.
        required: false
        choices: ['TYPE_UNSPECIFIED', 'TYPE_PKCS12_FILE', 'TYPE_GOOGLE_CREDENTIALS_FILE']
    key_algorithm:
        description:
            - Specifies the algorithm for the key.
        required: false
        choices: ['KEY_ALG_UNSPECIFIED', 'KEY_ALG_RSA_1024', 'KEY_ALG_RSA_2048']
    service_account:
        description:
            - The name of the serviceAccount.
        required: false
    path:
        description:
            - The full name of the file that will hold the service account private key. The management
              of this file will depend on the value of sync_file parameter.
            - File path must be absolute.
        required: false
    key_id:
        description:
            - Used to ensure the deletion of the key in the absence of a key file.
        required: false
    fail_if_mismatch:
        description:
            - If set to 'true' protects the target file from being rewritten with a new private
              key. By default the file is always ensured to have a valid private key on final
              state.
        required: false
        type: bool
extends_documentation_fragment: gcp
'''

EXAMPLES = '''
- name: create a service account key
  gcp_iam_service_account_key:
      project: "{{ gcp_project }}"
      service_account:
        name: "{{ gcp_cred_email }}"
        project: "{{ gcp_project }}"
      auth_kind: "{{ gcp_cred_kind }}"
      key_id: "abcdefabcdefabcdefabcdefabc1234567810111"
      path: /tmp/ansible-service-account-key
      service_account_file: "{{ gcp_cred_file }}"
      scopes:
        - https://www.googleapis.com/auth/iam
      state: present
  register: key
- name: create a service account key
  gcp_iam_service_account_key:
      project: testProject
      service_account:
        name: "{{ gcp_cred_email }}"
        project: testProject
      auth_kind: service_account
      key_id: "{{ key['name'].split('/')[-1] }}"
      service_account_file: /tmp/auth.pem
      scopes:
        - https://www.googleapis.com/auth/iam
      state: present
'''

RETURN = '''
    name:
        description:
            - The name of the key.
        returned: success
        type: str
    private_key_type:
        description:
            - Output format for the service account key.
        returned: success
        type: str
    key_algorithm:
        description:
            - Specifies the algorithm for the key.
        returned: success
        type: str
    private_key_data:
        description:
            - Private key data. Base-64 encoded.
        returned: success
        type: str
    public_key_data:
        description:
            - Public key data. Base-64 encoded.
        returned: success
        type: str
    valid_after_time:
        description:
            - Key can only be used after this time.
        returned: success
        type: str
    valid_before_time:
        description:
            - Key can only be used before this time.
        returned: success
        type: str
    service_account:
        description:
            - The name of the serviceAccount.
        returned: success
        type: dict
    path:
        description:
            - The full name of the file that will hold the service account private key. The management
              of this file will depend on the value of sync_file parameter.
            - File path must be absolute.
        returned: success
        type: str
    key_id:
        description:
            - Used to ensure the deletion of the key in the absence of a key file.
        returned: success
        type: str
    fail_if_mismatch:
        description:
            - If set to 'true' protects the target file from being rewritten with a new private
              key. By default the file is always ensured to have a valid private key on final
              state.
        returned: success
        type: bool
'''

################################################################################
# Imports
################################################################################

from ansible.module_utils.gcp_utils import navigate_hash, GcpSession, GcpModule, GcpRequest, replace_resource_dict
import json

################################################################################
# Main
################################################################################


def main():
    """Main function"""

    module = GcpModule(
        argument_spec=dict(
            state=dict(default='present', choices=['present', 'absent'], type='str'),
            private_key_type=dict(type='str', choices=['TYPE_UNSPECIFIED', 'TYPE_PKCS12_FILE', 'TYPE_GOOGLE_CREDENTIALS_FILE']),
            key_algorithm=dict(type='str', choices=['KEY_ALG_UNSPECIFIED', 'KEY_ALG_RSA_1024', 'KEY_ALG_RSA_2048']),
            service_account=dict(type='dict'),
            path=dict(type='str'),
            key_id=dict(type='str'),
            fail_if_mismatch=dict(type='bool')
        )
    )

    state = module.params['state']

    fetch = fetch_resource(module, self_link(module))
    changed = False

    if fetch:
        if state == 'present':
            if is_different(module, fetch):
                fetch = update(module, self_link(module))
                changed = True
        else:
            delete(module, self_link(module))
            fetch = {}
            changed = True
    else:
        if state == 'present':
            fetch = create(module, collection(module))
            changed = True
        else:
            fetch = {}

    fetch.update({'changed': changed})

    module.exit_json(**fetch)


def create(module, link):
    if module.params['path'] and module.params['fail_if_mismatch']:
      module.fail_json(msg="Cannot overwrite file as demanded by fail_if_mismatch => true")
    auth = GcpSession(module, 'iam')
    fetched = return_if_object(module, auth.post(link, resource_to_request(module)))

    if fetched and module.params['path']:
      import json
      cred_file = open(module.params['path'], 'w')
      cred_file.write(json.dumps(fetched))
      cred_file.close()
    return fetched


def update(module, link):
    auth = GcpSession(module, 'iam')
    return return_if_object(module, auth.put(link, resource_to_request(module)))


def delete(module, link):
    auth = GcpSession(module, 'iam')
    return return_if_object(module, auth.delete(link))


def resource_to_request(module):
    request = {
        u'privateKeyType': module.params.get('private_key_type'),
        u'keyAlgorithm': module.params.get('key_algorithm')
    }
    return_vals = {}
    for k, v in request.items():
        if v:
            return_vals[k] = v

    return return_vals


def fetch_resource(module, link):
    auth = GcpSession(module, 'iam')
    return return_if_object(module, auth.get(link))


def self_link(module):
    res = {
        'project': module.params['project'],
        'service_account': replace_resource_dict(module.params['service_account'], 'name'),
        'key_id': module.params['key_id']
    }
    return "https://iam.googleapis.com/v1/projects/{project}/serviceAccounts/{service_account}/keys/{key_id}".format(**res)


def collection(module):
    res = {
        'project': module.params['project'],
        'service_account': replace_resource_dict(module.params['service_account'], 'name')
    }
    return "https://iam.googleapis.com/v1/projects/{project}/serviceAccounts/{service_account}/keys".format(**res)


def return_if_object(module, response):
    # If not found, return nothing.
    if response.status_code == 404:
        return None

    # If no content, return nothing.
    if response.status_code == 204:
        return None

    try:
        module.raise_for_status(response)
        result = response.json()
    except getattr(json.decoder, 'JSONDecodeError', ValueError) as inst:
        module.fail_json(msg="Invalid JSON response with error: %s" % inst)

    result = decode_response(result, module)

    if navigate_hash(result, ['error', 'errors']):
        module.fail_json(msg=navigate_hash(result, ['error', 'errors']))

    return result


def is_different(module, response):
    request = resource_to_request(module)
    response = response_to_hash(module, response)
    request = decode_response(request, module)

    # Remove all output-only from response.
    response_vals = {}
    for k, v in response.items():
        if k in request:
            response_vals[k] = v

    request_vals = {}
    for k, v in request.items():
        if k in response:
            request_vals[k] = v

    return GcpRequest(request_vals) != GcpRequest(response_vals)


# Remove unnecessary properties from the response.
# This is for doing comparisons with Ansible's current parameters.
def response_to_hash(module, response):
    return {
        u'name': response.get(u'name'),
        u'privateKeyType': response.get(u'privateKeyType'),
        u'keyAlgorithm': response.get(u'keyAlgorithm'),
        u'privateKeyData': response.get(u'privateKeyData'),
        u'publicKeyData': response.get(u'publicKeyData'),
        u'validAfterTime': response.get(u'validAfterTime'),
        u'validBeforeTime': response.get(u'validBeforeTime')
    }


# Format the request to match the expected input by the API
def decode_response(response, module):
    return response

if __name__ == '__main__':
    main()
